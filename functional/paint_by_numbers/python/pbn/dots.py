__author__ = 'eczech'

import numpy as np


def _convert_dots_to_matrix(dots, color_on, color_off):
    r = np.expand_dims(dots, 2)
    return np.where(r == [0.], color_off, color_on)


class AlphabetLabelRenderer(object):

    dot_matrix_shape = (7, 5)

    def __init__(self, labels):
        self.labels = labels
        self.label_map = None

    def get_labels(self):
        return sorted(list(self.labels.keys()))

    def get_matrix_for_label(self, label, color_on, color_off):
        dots = self.labels.get(label)
        if dots is None:
            return None
        return _convert_dots_to_matrix(dots, color_on, color_off)

    def get_matrix_for_key(self, key, color_on, color_off):
        if self.label_map is None:
            raise ValueError('Key to label map must be defined (via \
                "set_keys_for_labels" before calling "get_matrix_for_key"')
        label = self.label_map.get(key)
        return self.get_matrix_for_label(label, color_on, color_off)

    def set_keys_for_labels(self, label_map):
        """ Maps user-defined keys to the labels present

        For example, this could be used to map cluster ids to individual letters, A-Z
        :param label_map: Dict like {key => label}
        :return: self
        """
        self.label_map = label_map
        return self

    def get_dot_matrix_shape(self):
        return self.dot_matrix_shape


def get_label_renderer():
    words = {
        'A': '{0x10,0x28,0x44,0x44,0x7c,0x44,0x44,0x00}',
        'B': '{0x78,0x44,0x44,0x78,0x44,0x44,0x78,0x00}',
        'C': '{0x38,0x44,0x40,0x40,0x40,0x44,0x38,0x00}',
        'D': '{0x70,0x48,0x44,0x44,0x44,0x48,0x70,0x00}',
        'E': '{0x7c,0x40,0x40,0x70,0x40,0x40,0x7c,0x00}',
        'F': '{0x7c,0x40,0x40,0x70,0x40,0x40,0x40,0x00}',
        'G': '{0x38,0x44,0x40,0x40,0x5c,0x44,0x38,0x00}',
        'H': '{0x44,0x44,0x44,0x7c,0x44,0x44,0x44,0x00}',
        'I': '{0x7c,0x10,0x10,0x10,0x10,0x10,0x7c,0x00}',
        'J': '{0x7c,0x08,0x08,0x08,0x08,0x48,0x30,0x00}',
        'K': '{0x44,0x48,0x50,0x60,0x50,0x48,0x44,0x00}',
        'L': '{0x40,0x40,0x40,0x40,0x40,0x40,0x7c,0x00}',
        'M': '{0x44,0x6c,0x54,0x44,0x44,0x44,0x44,0x00}',
        'N': '{0x44,0x44,0x64,0x54,0x4c,0x44,0x44,0x00}',
        'O': '{0x10,0x28,0x44,0x44,0x44,0x28,0x10,0x00}',
        'P': '{0x78,0x44,0x44,0x78,0x40,0x40,0x40,0x00}',
        'Q': '{0x38,0x44,0x44,0x44,0x54,0x4c,0x38,0x00}',
        'R': '{0x78,0x44,0x44,0x78,0x50,0x48,0x44,0x00}',
        'S': '{0x38,0x44,0x40,0x38,0x04,0x44,0x38,0x00}',
        'T': '{0x7c,0x10,0x10,0x10,0x10,0x10,0x10,0x00}',
        'U': '{0x44,0x44,0x44,0x44,0x44,0x44,0x38,0x00}',
        #'V': '{0x44,0x44,0x44,0x28,0x28,0x10,0x00,0x00}',  Removing this because on account of ambiguity with U
        'W': '{0x44,0x44,0x44,0x54,0x54,0x28,0x00,0x00}',
        'X': '{0x44,0x44,0x28,0x10,0x28,0x44,0x44,0x00}',
        'Y': '{0x44,0x44,0x44,0x28,0x10,0x10,0x10,0x00}',
        'Z': '{0x7c,0x04,0x08,0x10,0x20,0x40,0x7c,0x00}'
    }

    alphabet = {}
    for k, v in words.items():
        def get_bin(hex_string):
            return bin(int(hex_string, 16))[2:].zfill(8)
        dot_mat = np.zeros((7, 5))
        rows = v.replace('{', '').replace('}', '').split(',')
        for i, row in enumerate(rows):
            if i >= 7:
                continue
            for j, val in enumerate(get_bin(row)[1:6]):
                dot_mat[i, j] = int(val)
        alphabet[k] = dot_mat

    return AlphabetLabelRenderer(alphabet)